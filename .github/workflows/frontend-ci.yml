name: CI - Frontend

on:
  push:
    branches: [ dev, test, main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código frontend
        uses: actions/checkout@v3

      - name: Login a DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build y push de imagen Docker
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            luca011/frontend-atales:${{ github.ref_name == 'main' && 'prod' || github.ref_name }}-latest

      - name: Checkout repo infraestructura
        uses: actions/checkout@v3
        with:
          repository: LucaCostabile/infrastructura-Atales
          path: infra
          token: ${{ secrets.PAT_GITHUB }}

      - name: Cambiar a la rama correspondiente
        run: |
          cd infra
          BRANCH=${{ github.ref_name }}
          git fetch origin $BRANCH
          git checkout -b $BRANCH origin/$BRANCH || git checkout $BRANCH

      - name: Instalar kubeseal
        run: |
          wget https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.18.0/kubeseal-0.18.0-linux-amd64.tar.gz
          tar -xvzf kubeseal-0.18.0-linux-amd64.tar.gz
          sudo install -m 755 kubeseal /usr/local/bin/kubeseal

      # 🔐 Actualizar Sealed Secrets
      - name: Actualizar Sealed Secrets
        run: |
          cd infra

          BRANCH=${{ github.ref_name }}
          ENV=$([[ "$BRANCH" == "main" ]] && echo "prod" || [[ "$BRANCH" == "test" ]] && echo "test" || echo "dev")

          echo "Actualizando sealed secrets para $ENV"

          mkdir -p "sealed-secrets/$ENV"

          if [ ! -f "sealed-secrets-cert.pem" ]; then
            echo "❌ Error: No se encontró sealed-secrets-cert.pem"
            exit 1
          fi

          cat > temp-secret.yaml << EOF
          apiVersion: v1
          kind: Secret
          metadata:
            name: frontend-tls
            namespace: $ENV
          type: kubernetes.io/tls
          data:
            tls.crt: $(echo -n "${{ secrets.TLS_CRT }}" | base64 -w 0)
            tls.key: $(echo -n "${{ secrets.TLS_KEY }}" | base64 -w 0)
          EOF

          kubeseal --cert sealed-secrets-cert.pem -f temp-secret.yaml -w "sealed-secrets/$ENV/frontend-sealed-secrets.yaml"
          rm temp-secret.yaml

          echo "✅ Sealed secrets actualizado para $ENV"

      # 🚀 Actualizar imagen en kustomization.yaml del overlay
      - name: Actualizar imagen en Kustomize
        run: |
          cd infra

          BRANCH=${{ github.ref_name }}
          ENV=$([[ "$BRANCH" == "main" ]] && echo "prod" || [[ "$BRANCH" == "test" ]] && echo "test" || echo "dev")

          KUSTOMIZE_FILE="overlays/$ENV/frontend/kustomization.yaml"

          if [ ! -f "$KUSTOMIZE_FILE" ]; then
            echo "❌ Error: No se encontró $KUSTOMIZE_FILE"
            exit 1
          fi

          IMAGE_TAG="${ENV}-latest"

          echo "Actualizando imagen en $KUSTOMIZE_FILE a tag $IMAGE_TAG"

          # Usa sed para reemplazar la línea del newTag
          sed -i "s|newTag: .*|newTag: ${IMAGE_TAG}|g" "$KUSTOMIZE_FILE"

          echo "✅ Imagen actualizada en $KUSTOMIZE_FILE"

      # Commit y push
      - name: Commit y push de cambios
        run: |
          cd infra

          git config user.email "lucacostabile011@gmail.com"
          git config user.name "Luca Costabile CI"

          BRANCH=${{ github.ref_name }}
          ENV=$([[ "$BRANCH" == "main" ]] && echo "prod" || [[ "$BRANCH" == "test" ]] && echo "test" || echo "dev")

          git pull --no-rebase origin $BRANCH
          git add "sealed-secrets/$ENV/frontend-sealed-secrets.yaml" "overlays/$ENV/frontend/kustomization.yaml"

          if ! git diff --cached --quiet; then
            git commit -m "ci(frontend): actualiza sealed secrets y despliegue imagen $IMAGE_TAG para $ENV"
            git push origin $BRANCH
            echo "✅ Cambios aplicados y enviados para $ENV"
          else
            echo "ℹ️ No hay cambios que commitear"
          fi
