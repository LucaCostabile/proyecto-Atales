name: CI - Auth Service

on:
  push:
    branches: [ dev, test, main ]
    paths:
      - 'backend/auth-service/**'
      - '.github/workflows/auth-ci.yml'

jobs:
  build-and-update-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push auth-service image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/auth-service
          push: true
          tags: |
            luca011/auth-service-atales:${{ github.ref_name == 'main' && 'prod' || github.ref_name }}-latest

      - name: Checkout repo de infraestructura
        uses: actions/checkout@v3
        with:
          repository: LucaCostabile/infrastructura-Atales
          path: infra
          token: ${{ secrets.PAT_GITHUB }}

      - name: Cambiar a la rama correspondiente
        run: |
          cd infra
          BRANCH=${{ github.ref_name }}
          git fetch origin $BRANCH
          git checkout -b $BRANCH origin/$BRANCH || git checkout $BRANCH

      - name: Instalar kubeseal
        run: |
          wget https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.18.0/kubeseal-0.18.0-linux-amd64.tar.gz
          tar -xvzf kubeseal-0.18.0-linux-amd64.tar.gz
          sudo install -m 755 kubeseal /usr/local/bin/kubeseal

      - name: Actualizar Sealed Secrets (sin kubectl)
        run: |
          cd infra
          
          # Determinar el ambiente basado en la rama
          case "${{ github.ref_name }}" in
            "main") ENV="prod" ;;
            "test") ENV="test" ;;
            *) ENV="dev" ;;
          esac
          
          echo "Actualizando sealed secrets para ambiente: $ENV"
          
          # Crear directorio si no existe
          mkdir -p "sealed-secrets/$ENV"
          
          # Verificar que existe la clave pública
          if [ ! -f "sealed-secrets-cert.pem" ]; then
            echo "❌ Error: No se encontró sealed-secrets-cert.pem"
            echo "Debes ejecutar el script de setup localmente primero"
            exit 1
          fi
          
          # Generar secret temporal en formato YAML
          cat > temp-secret.yaml << EOF
          apiVersion: v1
          kind: Secret
          metadata:
            name: backend-secrets
            namespace: $ENV
          type: Opaque
          data:
            CRYPTO_SECRET: $(echo -n "${{ secrets.CRYPTO_SECRET }}" | base64 -w 0)
            DB_PASSWORD: $(echo -n "${{ secrets.DB_PASSWORD }}" | base64 -w 0)
            DB_USER: $(echo -n "${{ secrets.DB_USER }}" | base64 -w 0)
            EXTERNAL_API_KEY: $(echo -n "${{ secrets.EXTERNAL_API_KEY }}" | base64 -w 0)
            GMAIL_APP_PASSWORD: $(echo -n "${{ secrets.GMAIL_APP_PASSWORD }}" | base64 -w 0)
            GMAIL_USER: $(echo -n "${{ secrets.GMAIL_USER }}" | base64 -w 0)
            JWT_SECRET_KEY: $(echo -n "${{ secrets.JWT_SECRET_KEY }}" | base64 -w 0)
          EOF
          
          # Convertir a sealed secret usando la clave pública
          kubeseal --cert sealed-secrets-cert.pem -f temp-secret.yaml -w "sealed-secrets/$ENV/auth-sealed-secrets.yaml"
          
          # Limpiar archivo temporal
          rm temp-secret.yaml
          
          echo "✅ Sealed secret actualizado para ambiente $ENV"

      - name: Commit y push cambios
        run: |
          cd infra
          git config user.email "lucacostabile011@gmail.com"
          git config user.name "Luca Costabile CI"
          
          BRANCH=${{ github.ref_name }}
          ENV=$([[ "$BRANCH" == "main" ]] && echo "prod" || [[ "$BRANCH" == "test" ]] && echo "test" || echo "dev")
          
          git pull --no-rebase origin $BRANCH
          git add "sealed-secrets/$ENV/auth-sealed-secrets.yaml"
          
          # Solo hacer commit si hay cambios
          if ! git diff --cached --quiet; then
            git commit -m "ci(auth): actualiza sealed secrets para $ENV"
            git push origin $BRANCH
            echo "✅ Sealed secrets actualizados para ambiente $ENV"
          else
            echo "ℹ️ No hay cambios en los sealed secrets"
          fi