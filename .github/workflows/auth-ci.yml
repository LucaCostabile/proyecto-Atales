name: CI - AUTH

on:
  push:
    branches:
      - main
      - dev-v2
      - test

env:
  IMAGE_NAME: auth-service

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del microservicio
        uses: actions/checkout@v3

      - name: Setear variables de entorno
        run: |
          case "${{ github.ref_name }}" in
            "main") ENV="prod" ;;
            "test") ENV="test" ;;
            *) ENV="dev" ;;
          esac

          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "TAG=${{ github.sha }}" >> $GITHUB_ENV
          echo "REPO=docker.io/${{ secrets.DOCKERHUB_USERNAME }}" >> $GITHUB_ENV

      - name: Logueo en DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Construir y pushear imagen
        run: |
          docker build -t $REPO/$IMAGE_NAME:$TAG .
          docker push $REPO/$IMAGE_NAME:$TAG

      - name: Clonar repo de infraestructura (actualiza imagen)
        uses: actions/checkout@v3
        with:
          repository: RocioMagnoni/infrastructura-Atales
          path: infraestructura
          token: ${{ secrets.PAT_GITHUB }}

      - name: Actualizar imagen en repo de infraestructura
        run: |
          cd infraestructura/overlays/$ENV
          yq eval -i '.images[0].newTag = "${{ env.TAG }}"' kustomization.yaml

          git config user.email "lucacostabile011@gmail.com"
          git config user.name "Luca Costabile CI"
          git add overlays/$ENV/kustomization.yaml
          git commit -m "ci($ENV): actualiza imagen $IMAGE_NAME a $TAG"
          git push origin main

      - name: Clonar repo de ArgoCD (sealed secrets)
        uses: actions/checkout@v3
        with:
          repository: RocioMagnoni/atales-argocd-ent
          path: sealed-secrets-repo
          token: ${{ secrets.PAT_GITHUB }}

      - name: Crear certificado (desde secret en GitHub)
        run: |
          echo "${{ secrets.SEALED_SECRET_CERT_PEM }}" | base64 -d > sealed-secrets-repo/sealed-secrets-cert.pem

      - name: Instalar kubeseal y yq
        run: |
          sudo wget -qO /usr/local/bin/kubeseal https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.25.0/kubeseal-linux-amd64
          sudo chmod +x /usr/local/bin/kubeseal

          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.35.2/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Actualizar Sealed Secret
        run: |
          cd sealed-secrets-repo

          mkdir -p sealed-secrets/$ENV

          cat > temp-secret.yaml <<EOF
          apiVersion: v1
          kind: Secret
          metadata:
            name: backend-secrets
            namespace: ambiente-atales-$ENV
          type: Opaque
          data:
            JWT_SECRET_KEY: $(echo -n "${{ secrets.JWT_SECRET_KEY }}" | base64 -w 0)
          EOF

          kubeseal --cert sealed-secrets-cert.pem -f temp-secret.yaml -w "sealed-secrets/$ENV/auth-sealed-secrets.yaml"
          rm temp-secret.yaml

          git config user.email "lucacostabile011@gmail.com"
          git config user.name "Luca Costabile CI"
          git pull origin main
          git add sealed-secrets/$ENV/auth-sealed-secrets.yaml
          git commit -m "ci($ENV): actualiza sealed secret de auth-service"
          git push origin main
